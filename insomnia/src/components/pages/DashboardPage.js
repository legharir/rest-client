import React, { Component } from 'react';
import { withStyles } from '@material-ui/core/styles';
import PropTypes from 'prop-types';
import utils from 'utils/utils';
import api from 'api/api';
import methods from 'constants/methods';
import authTypes from 'constants/authTypes';
import CssBaseline from '@material-ui/core/CssBaseline';
import UrlBar from 'components/UrlBar';
import TabBar from 'components/TabBar';
import ResponseArea from 'components/ResponseArea';
import TestField from 'components/TestField';
import AuthSelect from 'components/AuthSelect';
import RequestBody from 'components/RequestBody';
import KeyValueGroup from 'components/KeyValueGroup';
import UrlPreview from 'components/UrlPreview';
import AppDrawer from 'components/AppDrawer';

const styles = theme => ({
  root: {
    display: 'flex',
  },
  content: {
    flexGrow: 1,
    flexDirection: 'column',
  },
  tabBar: {
    marginRight: theme.spacing.unit * 2,
    marginLeft: theme.spacing.unit * 2,
  },
  textFieldContainer: {
    padding: theme.spacing.unit * 2,
    paddingBottom: 0,
  },
});

/**
 * The root component of the application. All child components are rendered here
 * @param {Object} classes Material-UI injected classes
 */
class DashboardPage extends Component {
  state = {
    method: methods.GET,
    url: '',
    params: [[]],
    headers: [[]],
    auth: {
      authType: authTypes.NONE,
      user: '',
      pass: '',
      token: '',
      tokenPrefix: 'Bearer',
    },
    data: '',
    response: '',
    error: false,
    selectedTab: 0,
    test: '',
    testResult: 0,
  };

  onSend = () => {
    const { method, url, params, headers, auth, data } = this.state;
    this.setState({ error: false });

    api.request
      .send(
        method,
        url,
        utils.toObject(params),
        utils.toObject(headers),
        auth,
        data ? JSON.parse(data) : data,
      )
      .then(resp =>
        this.setState({
          response: JSON.stringify(resp.data, null, '\t'),
        }),
      )
      .catch(err => this.setState({ error: true, response: err.message }));
  };

  /**
   * Event handler for the changing of the tab bar
   * @param {Object} e SyntheticEvent Object generated by the event
   * @param {Number} value Number representing the index of the tab that was clicked
   */
  handleTabChange = (e, value) => this.setState({ selectedTab: value });

  /**
   * Generic event handler for form elements
   * @param {Object} e SyntheticEvent Object generated by the event
   */
  handleChange = e => this.setState({ [e.target.name]: e.target.value });

  /**
   * Event handler for test field
   * @param {String} test content of the test
   */
  handleTestChange = test => this.setState({ test });

  /**
   * Event handler for request body change
   * @param {String} data The new value of the request body
   */
  handleBodyChange = data => this.setState({ data });

  /**
   * Authentication event handler for all auth inputs (user/pass/token)
   * @param {Object} e SyntheticEvent Object generated by the event
   */
  handleAuthChange = e =>
    this.setState({
      auth: { ...this.state.auth, [e.target.name]: e.target.value },
    });

  /**
   * Adds a key value field to the key value group at the specified index
   * @param {Number} index the index to add the key value field at
   */
  addKeyValueField = (path, index) =>
    this.setState(prevState => {
      const keyValueGroup = [...prevState[path]];
      keyValueGroup.splice(index + 1, 0, []);
      return { [path]: keyValueGroup };
    });

  /**
   * Removes the key value field from the specified group at the specified index
   * @param {String} path the path to the key value group in the state
   * @param {Number} index the index of the key value field to remove
   */
  removeKeyValueField = (path, index) =>
    this.setState(prevState => {
      let keyValueGroup = [...prevState[path]];
      keyValueGroup.splice(index, 1);
      keyValueGroup = keyValueGroup.length === 0 ? [[]] : keyValueGroup;
      return { [path]: keyValueGroup };
    });

  /**
   * Event handler when changing the key or value of a KeyValueGroup
   * @param {String} path the name of the state key for the KeyValueGroup
   * @param {Number} index the index of the KeyValueField to edit
   * @param {Number} field the key or value
   * @param {String} value the new value of the specified field
   */
  handleKeyValueChange = (path, index, field, value) =>
    this.setState(prevState => {
      const newKeyValue = [...prevState[path]];
      newKeyValue[index][field] = value === '' ? undefined : value;
      return { [path]: newKeyValue };
    });

  runTest = () => {
    const resp = this.state.response;
    this.setState({ testResult: eval(this.state.test) ? 1 : 2 });
  };

  populateTemplateRequest = method => {
    switch (method) {
      case 'GET Chuck Norris':
        this.setState({
          url: 'http://api.icndb.com/jokes/random/',
          params: [['limitTo', '[nerdy]']],
          test: 'resp.includes("Chuck Norris")',
        });
        break;
      default:
    }
  };

  render() {
    console.log(this.state);
    const { classes } = this.props;
    const {
      url,
      method,
      auth,
      params,
      headers,
      response,
      selectedTab,
      test,
      error,
      data,
    } = this.state;

    return (
      <div className={classes.root}>
        <CssBaseline />
        <AppDrawer populateTemplateRequest={this.populateTemplateRequest} />
        <div className={classes.content}>
          <UrlBar
            url={url}
            onSend={this.onSend}
            onChange={this.handleChange}
            method={method}
            response={response}
          />
          <div className={classes.tabBar}>
            <TabBar value={selectedTab} onChange={this.handleTabChange} />
          </div>
          {selectedTab === 0 && (
            <div className={classes.textFieldContainer}>
              <AuthSelect auth={auth} onChange={this.handleAuthChange} />
            </div>
          )}
          {selectedTab === 1 && (
            <div className={classes.textFieldContainer}>
              <UrlPreview params={params} urlBase={url} />

              <KeyValueGroup
                pairs={params}
                onKeyValueChange={(index, field, value) =>
                  this.handleKeyValueChange('params', index, field, value)
                }
                addKeyValueField={index =>
                  this.addKeyValueField('params', index)
                }
                removeKeyValueField={index =>
                  this.removeKeyValueField('params', index)
                }
                keyPlaceholder="New Key"
                valuePlaceholder="New Value"
              />
            </div>
          )}
          {selectedTab === 2 && (
            <div className={classes.textFieldContainer}>
              <KeyValueGroup
                pairs={headers}
                onKeyValueChange={(index, field, value) =>
                  this.handleKeyValueChange('headers', index, field, value)
                }
                addKeyValueField={index =>
                  this.addKeyValueField('headers', index)
                }
                removeKeyValueField={index =>
                  this.removeKeyValueField('headers', index)
                }
                keyPlaceholder="New Header"
                valuePlaceholder="New Value"
              />
            </div>
          )}
          {selectedTab === 3 && (
            <div className={classes.textFieldContainer}>
              <RequestBody
                data={data}
                isValidJSON={!utils.isValidJSON(data)}
                onChange={this.handleBodyChange}
              />
            </div>
          )}
          {selectedTab === 4 && (
            <div className={classes.textFieldContainer}>
              <TestField
                test={test}
                onChange={this.handleTestChange}
                runTest={this.runTest}
                testResult={this.state.testResult}
                resetTestResult={() => this.setState({ testResult: 0 })}
              />
            </div>
          )}
          <div className={classes.textFieldContainer}>
            <ResponseArea error={error} response={response} url={url} />
          </div>
        </div>
      </div>
    );
  }
}

DashboardPage.propTypes = {
  classes: PropTypes.object.isRequired, // eslint-disable-line
};

export default withStyles(styles)(DashboardPage);
